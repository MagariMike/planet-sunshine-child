{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { storage } from \"../firebase/config\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nconst useStorage = file => {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  //     useEffect(() => {\n\n  //         \n\n  const onUpload = () => {\n    const storageRef = ref(storage, `/archive/${file.name}`);\n\n    //         const uploadTask = uploadBytesResumable(storageRef, file);\n\n    //         uploadTask.on('state_changed', (snap) => { \n    //             let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n    //             setProgress(percentage)\n    //         }, (err) => { \n    //             setError(err);\n    //         }, async () => { \n    //             getDownloadURL(ref(storage, `/archive/${file.name}`)).then((url) => {\n\n    //         setUrl(url)\n    //   })        \n    //         })\n    //     }, [file])\n  };\n\n  return {\n    progress,\n    url,\n    error\n  };\n};\n_s(useStorage, \"0l6eMxKGG5ujvugS5+Q3CXy7hMQ=\");\nexport default useStorage;","map":{"version":3,"names":["useState","useEffect","storage","ref","uploadBytesResumable","getDownloadURL","useStorage","file","_s","progress","setProgress","error","setError","url","setUrl","onUpload","storageRef","name"],"sources":["/Users/mike/Desktop/projects/planet-sunshine-child/src/components/hooks/useStorage.js"],"sourcesContent":["\nimport { useState, useEffect } from \"react\";\nimport { storage } from \"../firebase/config\"\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\"\n\nconst useStorage = (file) => { \n    \n    const [ progress, setProgress] = useState(0);\n    const [ error, setError ] = useState(null);\n    const [ url, setUrl ] = useState(null)\n\n\n//     useEffect(() => {\n\n//         \n\nconst onUpload = () => { \n    const storageRef = ref(storage, `/archive/${file.name}`)\n        \n//         const uploadTask = uploadBytesResumable(storageRef, file);\n        \n//         uploadTask.on('state_changed', (snap) => { \n//             let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n//             setProgress(percentage)\n//         }, (err) => { \n//             setError(err);\n//         }, async () => { \n//             getDownloadURL(ref(storage, `/archive/${file.name}`)).then((url) => {\n\n//         setUrl(url)\n//   })        \n//         })\n//     }, [file])\n}\n\n    return ( \n        {progress, url, error }\n    )\n}\n\nexport default useStorage "],"mappings":";AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,GAAG,EAAEC,oBAAoB,EAAEC,cAAc,QAAQ,kBAAkB;AAE5E,MAAMC,UAAU,GAAIC,IAAI,IAAK;EAAAC,EAAA;EAEzB,MAAM,CAAEC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAC5C,MAAM,CAAEW,KAAK,EAAEC,QAAQ,CAAE,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAAEa,GAAG,EAAEC,MAAM,CAAE,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAG1C;;EAEA;;EAEA,MAAMe,QAAQ,GAAGA,CAAA,KAAM;IACnB,MAAMC,UAAU,GAAGb,GAAG,CAACD,OAAO,EAAG,YAAWK,IAAI,CAACU,IAAK,EAAC,CAAC;;IAE5D;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;EACA,CAAC;;EAEG,OACI;IAACR,QAAQ;IAAEI,GAAG;IAAEF;EAAM,CAAC;AAE/B,CAAC;AAAAH,EAAA,CAjCKF,UAAU;AAmChB,eAAeA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}