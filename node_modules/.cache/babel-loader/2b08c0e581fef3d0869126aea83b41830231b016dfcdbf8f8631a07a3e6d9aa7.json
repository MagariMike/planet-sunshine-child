{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Desktop/projects/planet-sunshine-child/src/components/UploadForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ProgressBar from './ProgressBar';\nimport { storage } from './firebase/config';\nimport { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\nimport \"../styles/upload-form.css\";\nimport { async } from '@firebase/util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadForm = () => {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [selectedImage, setSelectedImage] = useState(null);\n  // const [ url, setUrl ] = useState(null)\n  // const [ error, setError ] = useState(null)\n\n  const uploadImage = e => {\n    let file = e.target.files[0];\n    let fileRef = ref(storage, file.name);\n    const uploadTask = uploadBytesResumable(fileRef, file);\n    uploadTask.on('state_changed', snapshot => {\n      const percentage = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      setProgress(percentage);\n      console.log('Upload is ' + percentage + '% done');\n    }, getDownloadURL(ref(storage, 'images/stars.jpg')).then(url => {\n      // `url` is the download URL for 'images/stars.jpg'\n\n      // This can be downloaded directly:\n      const xhr = new XMLHttpRequest();\n      xhr.responseType = 'blob';\n      xhr.onload = event => {\n        const blob = xhr.response;\n      };\n      xhr.open('GET', url);\n      xhr.send();\n\n      // Or inserted into an <img> element\n      const img = document.getElementById('myimg');\n      img.setAttribute('src', url);\n    }).catch(error => {\n      // Handle any errors\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"upload-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/png, image/jpeg\",\n      onChange: uploadImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadForm, \"d1GCTENkzvRvqEyozxU/63dYbO0=\");\n_c = UploadForm;\nexport default UploadForm;\nvar _c;\n$RefreshReg$(_c, \"UploadForm\");","map":{"version":3,"names":["React","useState","ProgressBar","storage","ref","uploadBytesResumable","getDownloadURL","async","jsxDEV","_jsxDEV","UploadForm","_s","progress","setProgress","selectedImage","setSelectedImage","uploadImage","e","file","target","files","fileRef","name","uploadTask","on","snapshot","percentage","bytesTransferred","totalBytes","console","log","then","url","xhr","XMLHttpRequest","responseType","onload","event","blob","response","open","send","img","document","getElementById","setAttribute","catch","error","id","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/mike/Desktop/projects/planet-sunshine-child/src/components/UploadForm.js"],"sourcesContent":["import React, { useState } from 'react'\nimport ProgressBar from './ProgressBar';\nimport { storage } from './firebase/config'\nimport { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage'\n\nimport \"../styles/upload-form.css\"\nimport { async } from '@firebase/util';\n\nconst UploadForm = () => {\n\n    \n    const [progress, setProgress ] = useState(0)\n    const [ selectedImage, setSelectedImage ] = useState(null)\n    // const [ url, setUrl ] = useState(null)\n    // const [ error, setError ] = useState(null)\n    \n    \n    const uploadImage = (e) => { \n\n        let file = e.target.files[0];\n        let fileRef = ref(storage, file.name)\n        const uploadTask = uploadBytesResumable(fileRef, file)\n\n        uploadTask.on('state_changed', (snapshot) => {\n            \n        const percentage = (snapshot.bytesTransferred / snapshot.totalBytes * 100)\n        setProgress(percentage)\n        console.log('Upload is ' + percentage + '% done' )},\n\n\n        getDownloadURL(ref(storage, 'images/stars.jpg'))\n  .then((url) => {\n    // `url` is the download URL for 'images/stars.jpg'\n\n    // This can be downloaded directly:\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = 'blob';\n    xhr.onload = (event) => {\n      const blob = xhr.response;\n    };\n    xhr.open('GET', url);\n    xhr.send();\n\n    // Or inserted into an <img> element\n    const img = document.getElementById('myimg');\n    img.setAttribute('src', url);\n  })\n  .catch((error) => {\n    // Handle any errors\n  })\n        )\n    }; \n\n\n\n   \n  return (\n    <form id=\"upload-form\">\n        <input type=\"file\" accept=\"image/png, image/jpeg\" onChange={uploadImage}></input>\n       \n        {/* {progress} */}\n\n    \n        <div>\n            <div className='output'>\n                {/* { error && <div className='error'>{error}</div>} */}\n                {/* { file ? <div>{file.name}</div> : 'please choose a file'} */}\n                {/* { file && <ProgressBar file={file} setFile={setFile}/> } */}\n            </div>\n        </div>\n    </form>\n  )\n}\n\nexport default UploadForm"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,GAAG,EAAEC,oBAAoB,EAAEC,cAAc,QAAQ,kBAAkB;AAE5E,OAAO,2BAA2B;AAClC,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAGrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAE,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAC5C,MAAM,CAAEa,aAAa,EAAEC,gBAAgB,CAAE,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC1D;EACA;;EAGA,MAAMe,WAAW,GAAIC,CAAC,IAAK;IAEvB,IAAIC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC5B,IAAIC,OAAO,GAAGjB,GAAG,CAACD,OAAO,EAAEe,IAAI,CAACI,IAAI,CAAC;IACrC,MAAMC,UAAU,GAAGlB,oBAAoB,CAACgB,OAAO,EAAEH,IAAI,CAAC;IAEtDK,UAAU,CAACC,EAAE,CAAC,eAAe,EAAGC,QAAQ,IAAK;MAE7C,MAAMC,UAAU,GAAID,QAAQ,CAACE,gBAAgB,GAAGF,QAAQ,CAACG,UAAU,GAAG,GAAI;MAC1Ef,WAAW,CAACa,UAAU,CAAC;MACvBG,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGJ,UAAU,GAAG,QAAS,CAAC;IAAA,CAAC,EAGnDpB,cAAc,CAACF,GAAG,CAACD,OAAO,EAAE,kBAAkB,CAAC,CAAC,CACrD4B,IAAI,CAAEC,GAAG,IAAK;MACb;;MAEA;MACA,MAAMC,GAAG,GAAG,IAAIC,cAAc,CAAC,CAAC;MAChCD,GAAG,CAACE,YAAY,GAAG,MAAM;MACzBF,GAAG,CAACG,MAAM,GAAIC,KAAK,IAAK;QACtB,MAAMC,IAAI,GAAGL,GAAG,CAACM,QAAQ;MAC3B,CAAC;MACDN,GAAG,CAACO,IAAI,CAAC,KAAK,EAAER,GAAG,CAAC;MACpBC,GAAG,CAACQ,IAAI,CAAC,CAAC;;MAEV;MACA,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;MAC5CF,GAAG,CAACG,YAAY,CAAC,KAAK,EAAEb,GAAG,CAAC;IAC9B,CAAC,CAAC,CACDc,KAAK,CAAEC,KAAK,IAAK;MAChB;IAAA,CACD,CACK,CAAC;EACL,CAAC;EAKH,oBACEtC,OAAA;IAAMuC,EAAE,EAAC,aAAa;IAAAC,QAAA,gBAClBxC,OAAA;MAAOyC,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,uBAAuB;MAACC,QAAQ,EAAEpC;IAAY;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAKjF/C,OAAA;MAAAwC,QAAA,eACIxC,OAAA;QAAKgD,SAAS,EAAC;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIlB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEX,CAAC;AAAA7C,EAAA,CAhEKD,UAAU;AAAAgD,EAAA,GAAVhD,UAAU;AAkEhB,eAAeA,UAAU;AAAA,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}