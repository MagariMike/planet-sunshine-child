{"ast":null,"code":"\n// import { useState, useEffect } from \"react\";\n// import { storage } from \"../firebase/config\"\n// import { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\"\n\n// const useStorage = (file) => { \n\n//     const [ progress, setProgress] = useState(0);\n//     const [ error, setError ] = useState(null);\n//     const [ url, setUrl ] = useState(null)\n\n//     useEffect(() => {\n\n//         const storageRef = ref(storage, `/archive/${file.name}`)\n\n//         const uploadTask = uploadBytesResumable(storageRef, file);\n\n//         uploadTask.on('state_changed', (snap) => { \n//             let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n//             setProgress(percentage)\n//         }, (err) => { \n//             setError(err);\n//         }, async () => { \n//             getDownloadURL(ref(storage, `/archive/${file.name}`)).then((url) => {\n\n//         setUrl(url)\n//   })        \n//         })\n//     }, [file])\n\n//     return ( \n//         {progress, url, error }\n//     )\n// }\n\n// export default useStorage","map":{"version":3,"names":[],"sources":["/Users/mike/Desktop/projects/planet-sunshine-child/src/components/hooks/useStorage.js"],"sourcesContent":["\n// import { useState, useEffect } from \"react\";\n// import { storage } from \"../firebase/config\"\n// import { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\"\n\n// const useStorage = (file) => { \n    \n//     const [ progress, setProgress] = useState(0);\n//     const [ error, setError ] = useState(null);\n//     const [ url, setUrl ] = useState(null)\n\n\n//     useEffect(() => {\n\n//         const storageRef = ref(storage, `/archive/${file.name}`)\n        \n//         const uploadTask = uploadBytesResumable(storageRef, file);\n        \n//         uploadTask.on('state_changed', (snap) => { \n//             let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n//             setProgress(percentage)\n//         }, (err) => { \n//             setError(err);\n//         }, async () => { \n//             getDownloadURL(ref(storage, `/archive/${file.name}`)).then((url) => {\n\n//         setUrl(url)\n//   })        \n//         })\n//     }, [file])\n\n//     return ( \n//         {progress, url, error }\n//     )\n// }\n\n// export default useStorage "],"mappings":";AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}